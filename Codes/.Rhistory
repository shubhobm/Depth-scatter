scores = pcamod$scores
pairs(scores[,1:5], pch=19, cex=.5)
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(Y~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
n = nrow(commdata.X)
p = ncol(commdata.X)
norms = sqrt(commdata.X^2 %*% rep(1,p))
signs = commdata.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = log(commdata.X[,101])
which(Y==0)
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = log(commdata.X[,101]+1)
commdata.X = data.frame(scale(commdata.X[,-101]))
Y = Y[complete.cases(commdata.X)]
commdata.X = commdata.X[complete.cases(commdata.X),]
## vanilla PCA
pcamod = princomp(commdata.X)
plot(pcamod)
scores = pcamod$scores
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(Y~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
n = nrow(commdata.X)
p = ncol(commdata.X)
norms = sqrt(commdata.X^2 %*% rep(1,p))
signs = commdata.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
require(fda.usc)
depths = mdepth.HS(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
require(fda.usc)
depths = mdepth.MhD(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:5]
lm.PC = lm(Y~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:5]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
require(fda.usc)
depths = mdepth.RP(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:5]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(Y~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(Y~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
plot(Y)
hist(Y)
hist(log(Y))
Y = log(commdata.X[,101]+1)
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = log(commdata.X[,101]+1)
hist(log(Y))
hist(Y)
Y = (commdata.X[,101]+1)
hist(Y)
hist(log(Y))
hist(log(log((Y)))
hist(log(log((Y))))
summary(Y)
plot(Y)
hist(Y)
hist(log(Y))
hist(log(log((Y))))
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = log(log(commdata.X[,101]+1))
commdata.X = data.frame(scale(commdata.X[,-101]))
Y = Y[complete.cases(commdata.X)]
commdata.X = commdata.X[complete.cases(commdata.X),]
pcamod = princomp(commdata.X)
plot(pcamod)
scores = pcamod$scores
pairs(scores[,1:5], pch=19, cex=.5)
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(Y~X.PC)
summary(lm.PC)
which(Y==0)
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(Y~X.PC)
summary(Y)
Y = log(log(commdata.X[,101]+1)+1)
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = log(log(commdata.X[,101]+1)+1)
hist(Y)
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = commdata.X[,101]
commdata.X = data.frame(scale(commdata.X[,-101]))
Y = Y[complete.cases(commdata.X)]
commdata.X = commdata.X[complete.cases(commdata.X),]
boxcox(Y~X.PC)
pcamod = princomp(commdata.X)
plot(pcamod)
scores = pcamod$scores
pairs(scores[,1:5], pch=19, cex=.5)
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
boxcox(Y~X.PC)
Y=Y+1
boxcox(Y~X.PC)
hist(1/Y^2)
hist(1/Y)
hist(1/Y^3)
hist(1/Y^4)
?boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
## Comm_analyze: analysis of communities data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
commdata = read.csv("../Data/communities.data.txt", header=F)
NAcols = c(102:118, 122:125, 127) # columns with most NA entries
commdata.X = commdata[,-c(1:5, NAcols)]
# convert all columns into numeric
for(i in 1:ncol(commdata.X)){
if(class(commdata.X[,i]) != "numeric"){
commdata.X[,i] = as.numeric(paste(commdata.X[,i]))
}
}
Y = commdata.X[,101]+1
commdata.X = data.frame(scale(commdata.X[,-101]))
Y = Y[complete.cases(commdata.X)]
commdata.X = commdata.X[complete.cases(commdata.X),]
pcamod = princomp(commdata.X)
plot(pcamod)
scores = pcamod$scores
pairs(scores[,1:5], pch=19, cex=.5)
# PC-regression
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
n = nrow(commdata.X)
p = ncol(commdata.X)
norms = sqrt(commdata.X^2 %*% rep(1,p))
signs = commdata.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:5]
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:10]
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:2]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:2]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:3]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
X.PCrank = as.matrix(commdata.X) %*% pca.rank$loadings[,1:3]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:3]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:2]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:2]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:10]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:10]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:20]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:20]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
X.PC = as.matrix(commdata.X) %*% pcamod$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PC, seq(-5,5,.1))
lm.PC = lm(1/Y^3~X.PC)
summary(lm.PC)
par(mfrow=c(2,2))
plot(lm.PC)
par(mfrow=c(1,1))
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
require(fda.usc)
depths = mdepth.MhD(commdata.X, commdata.X)$dep
depths = max(depths) - depths
commdata.rank = signs * depths
pca.rank = princomp(commdata.rank)
plot(pca.rank)
scores.rank = pca.rank$scores
pairs(scores.rank[,1:5], pch=19, cex=.5)
# PC-regression
X.PCrank = as.matrix(commdata.rank) %*% pca.rank$loadings[,1:5]
# best transformation: boxcox
boxcox(Y~X.PCrank, seq(-5,5,.1))
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
plot(X.PCrank[,1], Y)
plot(X.PCrank[,2], Y)
plot(X.PCrank[,3], Y)
plot(X.PCrank[,4], Y)
plot(X.PCrank[,5], Y)
pairs(X.PCrank)
lm.PCrank = lm(1/Y^3~X.PCrank)
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
lm.PCrank = lm(1/Y^3~X.scores.rank[,1:5])
summary(lm.PCrank)
par(mfrow=c(2,2))
plot(lm.PCrank)
par(mfrow=c(1,1))
pvalues <- read.csv("C:/Study/My projects/Depth-model selection/pvalues.txt")
View(pvalues)
pmeans = apply(pvalues,1,mean)
pmeans
pmeans = apply(pvalues,2,mean)
pmeans
pmeans = colMeans(pvalues, na.rm=T)
pmeans = colMeans(pvalues)
class(pvalues)
pmeans = colMeans(as.matrix(pvalues), na.rm=T)
as.matrix(pvalues)
lapply(pvalues, class)
f = function(x) mean(as.numeric(paste(x), na.rm=T))
pmeans = apply(pvalues,2,f)
pmeans
pmeans = apply(pvalues,1,f)
pmeans
plot(1:100, pmeans)
f(pvalues[,1])
View(pvalues)
f(pvalues[1,])
as.numeric(paste(pvalues[,1]))
as.numeric(paste(pvalues[1,]))
pvalues[1,]
as.numeric((pvalues[1,]))
as.numeric(as.character(pvalues[1,]))
as.numeric(as.character(pvalues[1,-1]))
as.numeric(paste(as.matrix(pvalues[1,])))
pvalues = as.matrix(pvalues)
pvalues = as.matrix(pvalues[,-1])
pvalues
pmeans = apply(pvalues, 1, mean)
pmeans
pmeans = apply(pvalues, 1, f)
pmeans
plot(1:100, pmeans)
plot(1:100, pmeans, pch=19, cex=.5)
pmeans = apply(pvalues, 2, f)
pmeans
