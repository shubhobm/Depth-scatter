ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
scatter3D(X[,1], X[,2], rep(0,nrow(X)), pch=19, cex=.5, add=TRUE)
persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
scatter3D(X[,1], X[,2], rep(0,nrow(X)), pch=19, cex=.5, add=TRUE)
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)))
?trans3d
points(X[,1], X[,2], rep(0,nrow(X)))
?points3D
points3D(X[,1], X[,2], rep(0,nrow(X)))
persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
points3D(X[,1], X[,2], rep(0,nrow(X)))
points3D(X[,1], X[,2], rep(0,nrow(X)), ticktype='detailed')
points3D(X[,1], X[,2], rep(0,nrow(X)), ticktype='detailed', pch=19, cex=.5)
persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
points3D(X[,1], X[,2], rep(0,nrow(X)), ticktype='detailed', pch=19, cex=.5)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
ticktype="detailed", nticks=3,
theta=45, phi=45, col=gray(.9), border=gray(.3))
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
col="lightblue",expand = 0.5,shade = 0.2)
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
col="lightblue",expand = 0.5,shade = 0.2)
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16, cex=.5)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
main="(a)", xlab="x1", ylab="x2", zlab="IF(x0)",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30)
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16, cex=.5)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border=T)
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16, cex=.5)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
obs = trans3d(X[,1], X[,2], rep(0,nrow(X)), p)
points(obs, col="red",pch=16, cex=.5)
?trans2d
?trans3d
points(X[,1], X[,2], rep(0,nrow(X)), add=TRUE)
points3D(X[,1], X[,2], rep(0,nrow(X)), add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep+2, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
points3D(X[,1], X[,2], rep(0,nrow(X)), add=TRUE)
plot(X)
<<<<<<< HEAD
n = 1e3
set.seed(120214)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(25,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=2*sig)
uX = X / sqrt(rowSums(X^2))
dX = EPQD(X, X)[,3]
Xrank = uX * (max(dX) - dX)
par(mfrow=c(1,2))
plot(X, pch=19, cex=.5)
plot(Xrank, pch=19, cex=.5)
par(mfrow=c(1,1))
sig = Gamma %*% diag(c(2,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=2*sig)
uX = X / sqrt(rowSums(X^2))
dX = EPQD(X, X)[,3]
Xrank = uX * (max(dX) - dX)
par(mfrow=c(1,2))
plot(X, pch=19, cex=.5)
plot(Xrank, pch=19, cex=.5)
par(mfrow=c(1,1))
n = 1e3
set.seed(120214)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(9,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=2*sig)
uX = X / sqrt(rowSums(X^2))
dX = EPQD(X, X)[,3]
Xrank = uX * (max(dX) - dX)
par(mfrow=c(1,2))
plot(X, pch=19, cex=.5)
plot(Xrank, pch=19, cex=.5)
par(mfrow=c(1,1))
Sig
sig
serwd('./Codes')
setwd('./Codes')
setwd('/Codes')
getwd()
rm(list=ls());
source('misc_functions.R')
library(parallel)
rm(list=ls());
source('misc_functions.R')
library(parallel)
## Functions
?mclapply
n=20
p=2
iter=10
ncores=2
>>>>>>> 98a4265b555eb09ea1ebd29a812c4d8bcd0a920d
set.seed(12182014)
v = c(rep(0,p-1), 1)
lam = 1:p
Sigma = diag(lam)
MSE.mat = matrix(0, nrow=length(n), ncol=8)
<<<<<<< HEAD
for(i in 1:length(n)){
# function to compute stuff 1000 times for a given n
loopfun = function(j){
source('misc_functions.R')
require(fastM)
require(fda.usc)
require(mvtnorm)
iv = rep(0,9)
# get sample and construct sign matrix
iX = rmvt(n[i], sigma=Sigma, df=df)
iXnorm = sqrt(iX^2 %*% rep(1,p))
iS = iX / (iXnorm %*% rep(1,p))
# PCA on original sample
iP = princomp(iX)
iv[1] = abs(sum(v * iP$loadings[,1]))
# PCA on SCM
iPsign = princomp(iS)
iv[2] = abs(sum(v * iPsign$loadings[,1]))
# PCA on Tyler's cov matrix
T = TYLERshape(iX)$Sigma
iv[3] = abs(sum(v * eigen(T)$vectors[,1]))
# PCA on DCM and depth-weighted tyler's scatter
# Tukey's depth
idep = mdepth.HS(iX,iX)$dep
#idep = EPQD(iX,iX)[,p+1]
idep = max(idep) - idep
iXd = iS * idep
iPdepth = princomp(iXd)
iv[4] = abs(sum(v * iPdepth$loadings[,1]))
Td = TylerSig(iX, weight=idep)
iv[5] = abs(sum(v * eigen(Td)$vectors[,1]))
# Mahalanobis depth
idep = mdepth.MhD(iX,iX)$dep
idep = max(idep) - idep
iXd = iS * idep
iPdepth = princomp(iXd)
iv[6] = abs(sum(v * iPdepth$loadings[,1]))
Td = TylerSig(iX, weight=idep)
iv[7] = abs(sum(v * eigen(Td)$vectors[,1]))
# Projection depth
idep = mdepth.RP(iX,iX)$dep
idep = max(idep) - idep
iXd = iS * idep
iPdepth = princomp(iXd)
iv[8] = abs(sum(v * iPdepth$loadings[,1]))
Td = TylerSig(iX, weight=idep)
iv[9] = abs(sum(v * eigen(Td)$vectors[,1]))
iv
}
# parallel code: compute MSE elements iter times
cl = makeCluster(ncores)
registerDoSNOW(cl)
system.time(eff.v <- foreach(j=1:iter) %dopar% loopfun(j))
stopCluster(cl)
# get MSE and return
eff.v = matrix(unlist(eff.v), ncol=9, byrow=T)
(MSE.vec = apply(eff.v, 2, function(x) mean(acos(x)^2)))
MSE.mat[i,] = MSE.vec[1]/MSE.vec[-1]
}
MSE.mat
}
# For p=3
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 3, 1e3, ncores=8))
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 3, 1e3, ncores=8))
system.time(t5.table <- FSE.t(n.vec, 3, df=5, 1e3, ncores=8))
system.time(t6.table <- FSE.t(n.vec, 3, df=6, 1e3, ncores=8))
system.time(t10.table <- FSE.t(n.vec, 3, df=10, 1e3, ncores=8))
system.time(t15.table <- FSE.t(n.vec, 3, df=15, 1e3, ncores=8))
system.time(t25.table <- FSE.t(n.vec, 3, df=25, 1e3, ncores=8))
t10.table
t15.table
t5.table
system.time(t25.table <- FSE.t(n.vec, 3, df=25, 1e3, ncores=6))
table3 = rbind(t5.table, rep(0,8),
t6.table, rep(0,8),
t10.table, rep(0,8),
t15.table, rep(0,8),
t25.table, rep(0,8),
norm.table)
table3 = table3[,c(1,2,3,5,7,4,6,8)]
write.csv(format(round(table3, 2), nsmall=2), "table3.txt")
norm.table
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 5, 1e3, ncores=8))
system.time(t5.table <- FSE.t(n.vec, 5, df=5, 1e3, ncores=8))
system.time(t6.table <- FSE.t(n.vec, 5, df=6, 1e3, ncores=8))
system.time(t10.table <- FSE.t(n.vec, 5, df=10, 1e3, ncores=8))
system.time(t15.table <- FSE.t(n.vec, 5, df=15, 1e3, ncores=8))
system.time(t25.table <- FSE.t(n.vec, 5, df=25, 1e3, ncores=6))
table5 = rbind(t5.table, rep(0,8),
t6.table, rep(0,8),
t10.table, rep(0,8),
t15.table, rep(0,8),
t25.table, rep(0,8),
norm.table)
table5 = table5[,c(1,2,3,5,7,4,6,8)]
write.csv(format(round(table5, 2), nsmall=2), "table5.txt")
t5.table
norm.table
t6.table
t25.table
table5
system.time(t10.table <- FSE.t(n.vec, 5, df=10, 1e3, ncores=8))
system.time(t15.table <- FSE.t(n.vec, 5, df=15, 1e3, ncores=8))
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 6, 1e3, ncores=8))
system.time(t5.table <- FSE.t(n.vec, 6, df=5, 1e3, ncores=8))
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 4, 1e3, ncores=8))
n.vec = c(20,50,100,300,500)
system.time(norm.table <- FSE.norm(n.vec, 4, 1e3, ncores=6))
system.time(t5.table <- FSE.t(n.vec, 4, df=5, 1e3, ncores=6))
system.time(t6.table <- FSE.t(n.vec, 4, df=6, 1e3, ncores=6))
system.time(t10.table <- FSE.t(n.vec, 4, df=10, 1e3, ncores=6))
system.time(t15.table <- FSE.t(n.vec, 4, df=15, 1e3, ncores=6))
system.time(t25.table <- FSE.t(n.vec, 4, df=25, 1e3, ncores=6))
table4 = rbind(t5.table, rep(0,8),
t6.table, rep(0,8),
t10.table, rep(0,8),
t15.table, rep(0,8),
t25.table, rep(0,8),
norm.table)
table4 = table4[,c(1,2,3,5,7,4,6,8)]
write.csv(format(round(table4, 2), nsmall=2), "table4.txt")
=======
install.packages("fda.usc")
install.packages("fastM")
install.packages("Rcpp")
=======
?points3D
X[,1]
summary(X[,1])
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
points3D(X[,1], X[,2], rep(0,nrow(X)), add=TRUE)
points3D(X[,1], X[,2], rep(0,nrow(X)))
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black', add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
points3D(X[,1], X[,2], rep(1,nrow(X)), add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
points3D(X[,1], X[,2], rep(1,nrow(X)),
pch=19, cex=.5, add=TRUE)
surf3D(pts, pts, rep(1, nrow(X)), add=TRUE)
?surf3D
persp3D(pts, pts, rep(1, nrow(X)), add=TRUE)
persp3D(pts, pts, 1, add=TRUE)
persp3D(pts, pts, 1,
col="lightblue", add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth",
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
persp3D(pts, pts, 1,
col="lightblue", add=TRUE)
points3D(X[,1], X[,2], rep(1,nrow(X)),
pch=19, cex=.5, add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(0,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
persp3D(pts, pts, 1,
col="lightblue", add=TRUE)
points3D(X[,1], X[,2], rep(1,nrow(X)),
pch=19, cex=.5, add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=30, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
X = matrix(rnorm(2e3), ncol=2) %*% sqrt(diag(c(2,1)))
# make grid of points
pts = seq(-3, 3, by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
points3D(X[,1], X[,2], -1,
pch=19, cex=.5, add=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, add=TRUE)
X = matrix(rnorm(2e3), ncol=2) %*% sqrt(diag(c(1,1/2)))
# make grid of points
pts = seq(-3, 3, by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
persp3D(pts, pts, 1,
col="lightblue", add=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, add=TRUE)
persp3D(pts, pts, -1,
col="lightblue", add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col="lightblue",expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, add=TRUE)
?points3D
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=adjustcolot("lightblue",.5),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=adjustcolor("lightblue",.5),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=adjustcolor("lightblue",1),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=adjustcolor("lightblue",.1),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .5),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
library(scales)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .5),expand = 0.5,shade = 0.2,
theta=30, phi=10, border='black')
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2))
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, colkey=NULL, add=TRUE)
?points3D
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2))
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, colvar=NULL, add=TRUE)
X = matrix(rnorm(1e3), ncol=2) %*% sqrt(diag(c(1,1/2)))
# make grid of points
pts = seq(-3, 3, by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2))
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, colvar=NULL, pch=.3, add=TRUE)
contour3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T), add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, colvar=NULL, pch=.3, add=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, colvar=NULL, pch=.3, col='red', add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, pch=.3, col='red', add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE,
mai=c(.5,.5,.5,.5))
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, pch=.3, col='red', add=TRUE)
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE,
mar=c(.5,.5,.5,.5))
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE,
mar=c(.1,.1,.1,.1))
default=par()
par(mai=rep(.5,4))
p = persp3D(pts, pts, matrix(mdepth.RP(xygrid,X)$dep, nrow=lengrid, byrow=T),
xlab="x1", ylab="x2", zlab="Depth", zlim=c(-1,1),
col=alpha("lightblue", .2),expand = 0.5,shade = 0.2,
theta=30, phi=10, border=alpha("black", .2), contour=TRUE)
points3D(X[,1], X[,2], rep(-1,nrow(X)),
pch=19, cex=.5, pch=.3, col='red', add=TRUE)
par(default)
>>>>>>> 90bf3163a1edd079615ab7b8b2f3d1f6fad877da
>>>>>>> 98a4265b555eb09ea1ebd29a812c4d8bcd0a920d
setwd("C:/Study/My projects/Depth-scatter/Codes")
rm(list=ls());
source('misc_functions.R')
## Functions
# DCM plots for different types of depth
plot.IFnorm = function(X, grid, depth, ...){
require(fda.usc)
# get depth values
if(depth=='HS'){
DX = mdepth.HS(X,X)$dep
}
else if(depth=='MhD'){
DX = mdepth.MhD(X,X)$dep
}
else {
DX = mdepth.RP(X,X)$dep
}
# get eigenvalues of DCM
DX = max(DX) - DX
lamDS = colMeans((DX^2/sum.lam.Zsq) * lam.Zsq)
# get htped at grid points
if(depth=='HS'){
Dgrid = mdepth.HS(grid,X)$dep
}
else if(depth=='MhD'){
Dgrid = mdepth.MhD(grid,X)$dep
}
else {
Dgrid = mdepth.RP(grid,X)$dep
}
Dgrid = max(Dgrid) - Dgrid
# get norms of influence fns for eigenvectors
mult = sqrt(lam[1]*lam[2])/(lamDS[1] - lamDS[2])
IFnorm.D = abs(mult * xygrid[,1] * xygrid[,2] * Dgrid^2 / diag(xygrid %*% Sig %*% t(xygrid)))
# plot result
persp(pts, pts, matrix(IFnorm.D, nrow=lengrid, byrow=T), ...)
}
## Scatterplot of data and D-rank
require(fda.usc)
n = 1e3
set.seed(120214)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(9,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=2*sig)
uX = X / sqrt(rowSums(X^2))
dX = mdepth.HS(X,X)$dep
Xrank = uX * (max(dX) - dX)
par(mfrow=c(1,3))
plot(X, pch=19, cex=.5)
plot(uX, pch=19, cex=.5)
plot(Xrank, pch=19, cex=.5)
par(mfrow=c(1,1))
