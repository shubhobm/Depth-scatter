text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, pch=19, cex=.7)
lines(ellipse(cov(scores.oct)), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, pch=19, cex=.7)
lines(ellipse(cov(scores.oct.rank)), lwd=2)
par(mfrow=c(1,1))
}
distanceplot(cr.X, 2, pch=19, col="blue")
cr.X = scale(creatinine[complete.cases(creatinine),])
cr.X
n = nrow(cr.X)
p = ncol(cr.X)
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, pch=19, cex=.7)
lines(ellipse(cov(scores.oct)), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, pch=19, cex=.7)
lines(ellipse(cov(scores.oct.rank)), lwd=2)
par(mfrow=c(1,1))
}
distanceplot(cr.X, 2, pch=19, col="blue")
scoreplot(cr.X, 2)
distanceplot(cr.X, 2, xlim=c(0,5), ylim=c(0,5), pch=19, col="blue")
scoreplot(cr.X, 2)
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct)), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank)), lwd=2)
par(mfrow=c(1,1))
}
scoreplot(cr.X, 2, pch=19, cex=.7, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-5,5), ylim=c(-3,3), cex=.7, col="blue")
distanceplot(cr.X, 2, xlim=c(0,5), ylim=c(0,5), pch=19, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-5,5), ylim=c(-3,3), cex=.7, col="blue")
## Analyze_octane: analysis of octane data
rm(list=ls())
setwd("C:/Study/My projects/Depth-scatter/Codes")
## Octane data
library(ellipse)
library(heavy)
data(dental)
cr.X = scale(dental[complete.cases(dental),])
n = nrow(cr.X)
p = ncol(cr.X)
dental
plot(dental[,1:2])
library(cepp)
data(colon)
?colon
data(Colon)
dim(Colon$X)
cr.X = scale(colon$X)
cr.X = scale(Colon$X)
n = nrow(cr.X)
p = ncol(cr.X)
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct)), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank)), lwd=2)
par(mfrow=c(1,1))
}
distanceplot(cr.X, 2, xlim=c(0,5), ylim=c(0,5), pch=19, col="blue")
distanceplot(cr.X, 2, pch=19, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-5,5), ylim=c(-3,3), cex=.7, col="blue")
scoreplot(cr.X, 2, pch=19, cex=.7, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col="blue")
Colon$Y
scoreplot(cr.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col=ifelse(Colon$Y==1,"red","blue"))
distanceplot(cr.X, 2, pch=19, col="blue")
cr.X = (Colon$X)
n = nrow(cr.X)
p = ncol(cr.X)
scoreplot(cr.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col=ifelse(Colon$Y==1,"red","blue"))
distanceplot(cr.X, 2, pch=19, col="blue")
scoreplot(cr.X, 2, pch=19, cex=.7, col=ifelse(Colon$Y==1,"red","blue"))
cr.X = scale(Colon$X)
n = nrow(cr.X)
p = ncol(cr.X)
cr.X = scale(Colon$X)
n = nrow(cr.X)
p = ncol(cr.X)
distanceplot(cr.X, 2, pch=19, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col=ifelse(Colon$Y==1,"red","blue"))
load('../Data/lta98.rda')
View(lta98$ltaTS)
data.X = scale(lta98$ltaTS[-1,])
n = nrow(cr.X)
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(cr.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col=ifelse(Colon$Y==1,"red","blue"))
scoreplot(data.X, 2, pch=19, xlim=c(-80,80), ylim=c(-50,50), cex=.7, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-10,10), ylim=c(-10,10), cex=.7, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-20,20), ylim=c(-20,20), cex=.7, col="blue")
?ellipse
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct), level=.9), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank), level=.9), lwd=2)
par(mfrow=c(1,1))
}
scoreplot(data.X, 2, pch=19, xlim=c(-20,20), ylim=c(-20,20), cex=.7, col="blue")
load('../Data/lta98.rda')
data.X = scale(lta98$ltaTC[-1,])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-20,20), ylim=c(-20,20), cex=.7, col="blue")
library(MASS)
names(Boston)
data.X = scale(Boston[,-ncol(Boston)])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-20,20), ylim=c(-20,20), cex=.7, col="blue")
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct), level=.975), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank), level=.975), lwd=2)
par(mfrow=c(1,1))
}
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-10,10), ylim=c(-10,10), cex=.7, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-5,5), ylim=c(-10,10), cex=.7, col="blue")
head(Cars93)
data.X = scale(Cars93[,-c(1:3,9,10,26,27)]])
data.X = scale(Cars93[,-c(1:3,9,10,26,27)])
data.X = scale(Cars93[,-c(1:3,9,10,16,26,27)])
summary(Cars93)
data.X = scale(Cars93[,-c(1:3,9:11,16,26,27)])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
data.X = scale(Cars.X[complete.cases(Cars.X),])
Cars.X = Cars93[,-c(1:3,9:11,16,26,27)]
data.X = scale(Cars.X[complete.cases(Cars.X),])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-5,5), ylim=c(-10,10), cex=.7, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-7,7), ylim=c(-5,5), cex=.7, col="blue")
data.X = (Cars.X[complete.cases(Cars.X),])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-7,7), ylim=c(-5,5), cex=.7, col="blue")
Cars.X = Cars93[,-c(1:3,9:11,16,26,27)]
data.X = scale(Cars.X[complete.cases(Cars.X),])
n = nrow(data.X)
p = ncol(data.X)
distanceplot(data.X, 2, pch=19, col="blue")
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-7,7), ylim=c(-5,5), cex=.7, col="blue")
distanceplot(data.X, 2, xlim=c(0,5), ylim=c(0,5), pch=19, col="blue")
data.X = (Cars.X[complete.cases(Cars.X),])
distanceplot(data.X, 2, xlim=c(0,5), ylim=c(0,5), pch=19, col="blue")
distanceplot(data.X, 2, pch=19, col="blue")
library(cepp)
data(Colon)
data.X = scale(Colon$X)
distanceplot(data.X, 2, pch=19, col="blue")
data.X
dim(data.X)
summary(as.factor(Colon$Y))
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct), level=.975), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank), level=.975), lwd=2)
par(mfrow=c(1,1))
}
distanceplot(data.X, 2, pch=19, col="blue")
scoreplot(data.X, 2, pch=19, xlim=c(-7,7), ylim=c(-5,5), cex=.7, col="blue")
