pca <- PcaClassic(bus2)
rpca <- PcaLocantore(bus2)
pcaHubert <- PcaHubert(bus2, k=17, kmax=17, mcd=FALSE)
pcamcd <- PcaCov(bus2, cov.control=CovControlMcd())
pcaogk <- PcaCov(bus2, cov.control=CovControlOgk())
pcarank = PcaRank(bus2)
ev <- getEigenvalues(pca)
evrob <- getEigenvalues(rpca)
evhub <- getEigenvalues(pcaHubert)
evmcd <- getEigenvalues(pcamcd)
evogk <- getEigenvalues(pcaogk)
evrank = getEigenvalues(pcarank)
uvar <- matrix(nrow=6, ncol=7)
svar <- sum(ev)
svarrob <- sum(evrob)
svarhub <- sum(evhub)
svarmcd <- sum(evmcd)
svarogk <- sum(evogk)
svarrank = sum(evrank)
for(i in 1:6){
uvar[i,1] <- i
uvar[i,2] <- round((svar - sum(ev[1:i]))/svar, 3)
uvar[i,3] <- round((svarrob - sum(evrob[1:i]))/svarrob, 3)
uvar[i,4] <- round((svarhub - sum(evhub[1:i]))/svarhub, 3)
uvar[i,5] <- round((svarmcd - sum(evmcd[1:i]))/svarmcd, 3)
uvar[i,6] <- round((svarogk - sum(evogk[1:i]))/svarogk, 3)
uvar[i,7] <- round((svarrank - sum(evrank[1:i]))/svarrank, 3)
}
uvar <- as.data.frame(uvar)
names(uvar) <- c("q", "Classical","Spherical", "Hubert", "MCD", "OGK", "Depth")
cat("\nBus data: proportion of unexplained variability for q components\n")
print(uvar)
pca3 <- PcaClassic(bus2, k=3) # classical
rpca3 <- PcaLocantore(bus2, k=3) # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3) # Hubert
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert), round(c(max(dist), max(rdist), max(hdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert")
cat("\nBus data: quantiles of distances to hiperplane\n")
print(qq)
##
## Reproduce Fig 6.1 from Maronna et al. (2006), page 214
##
cat("\nBus data: Q-Q plot of logs of distances to hyperplane (k=3)
\nfrom classical and robust estimates. The line is the identity diagonal\n")
plot(sort(log(dist)), sort(log(rdist)), xlab="classical", ylab="robust")
lines(sort(log(dist)), sort(log(dist)))
data.X = maryo
data(maryo)
data.X = maryo
data.X = scale(maryo)
distanceplot = function(data.X, npc, ...){
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct), level=.975), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank), level=.975), lwd=2)
par(mfrow=c(1,1))
}
distanceplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
eig.oct = svd.oct$d[1:npc]
# calculate score distance and orthogonal distance
SD = sqrt(rowSums(scores.oct^2 / matrix(eig.oct, nrow=n, ncol=npc, byrow=T)))
OD = sqrt(rowSums((data.X - t(P.oct %*% t(scores.oct)))^2))
# get cutoffs
SD.cutoff = sqrt(qchisq(0.975, 2))
ODt = OD^(2/3)
t = mean(ODt); s = sd(ODt)
OD.cutoff = (t+s*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SD > SD.cutoff | OD > OD.cutoff)
## distance-distance plots
par(mfrow=c(1,2))
plot(SD, OD, ...)
abline(v=SD.cutoff, col="red")
abline(h=OD.cutoff, col="red")
if(length(which.ind>0)){
text(SD[which.ind], OD[which.ind], indices[which.ind], pos=1)
}
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X, proj=2000)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
eig.oct.rank = svd.oct.rank$d[1:npc]
# calculate score distance and orthogonal distance
SDrank = sqrt(rowSums(scores.oct.rank^2 / matrix(eig.oct.rank, nrow=n, ncol=npc, byrow=T)))
ODrank = sqrt(rowSums((data.rank - t(P.oct.rank %*% t(scores.oct.rank)))^2))
# get cutoffs
SDrank.cutoff = sqrt(qchisq(0.975, 2))
ODtrank = ODrank^(2/3)
trank = mean(ODtrank); srank = sd(ODtrank)
ODrank.cutoff = (trank+srank*qnorm(.975))^(3/2)
indices = 1:n
which.ind = which(SDrank > SDrank.cutoff | ODrank > ODrank.cutoff)
plot(SDrank, ODrank, ...)
abline(v=SDrank.cutoff, col="red")
abline(h=ODrank.cutoff, col="red")
if(length(which.ind>0)){
text(SDrank[which.ind], ODrank[which.ind], indices[which.ind], pos=1)
}
par(mfrow=c(1,1))
}
scoreplot = function(data.X, npc, ...){
svd.oct = svd(data.X)
P.oct = svd.oct$v[,1:npc]
scores.oct = as.matrix(data.X) %*% P.oct
## score plot
par(mfrow=c(1,2))
plot(scores.oct, ...)
lines(ellipse(cov(scores.oct), level=.975), lwd=2)
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
svd.oct.rank = svd(data.rank)
P.oct.rank = svd.oct.rank$v[,1:npc]
scores.oct.rank = as.matrix(data.rank) %*% P.oct.rank
## score plot
plot(scores.oct.rank, ...)
lines(ellipse(cov(scores.oct.rank), level=.975), lwd=2)
par(mfrow=c(1,1))
}
PcaRank = function(data.X){
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank)
}
distanceplot(data.X, 2, pch=19, col="blue")
maryo
plot(maryo)
scoreplot(data.X, 2, xlim=c(-10,10), ylim=c(-5,5), pch=19, cex=.7, col="blue")
data.X=bus2
distanceplot(data.X, 2, pch=19, col="blue")
plot(PcaHubert(hbk, k=2))
plot(PcaRank(hbk, k=2))
plot(PcaClassic(hbk, k=2))
plot(PcaHubert(bus2, k=2))
plot(PcaClassic(bus2, k=2))
plot(PcaRank(bus2, k=2))
PcaRank = function(data.X, ...){
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(bus2, k=2))
plot(PcaClassic(bus2, k=2))
plot(PcaLocantore(bus2, k=2))
bus2 = scale(bus2)
plot(PcaLocantore(bus2, k=2))
plot(PcaHubert(bus2, k=2))
plot(PcaClassic(bus2, k=2))
plot(PcaRank(bus2, k=2))
PcaRank = function(data.X, ...){
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(bus2, k=2))
PcaRank = function(data.X, ...){
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(bus2, k=2))
PcaRank = function(data.X, ...){
# get ranks
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
print(PcaClassic(hbk), print.x=TRUE)
plot(PcaClassic(hbk), k=2)
plot(PcaHubert(hbk), k=2)
plot(PcaHubert(hbk), k=2)
plot(PcaHubert(hbk), k=2)
plot(PcaRank(hbk), k=2)
PcaRank(hbk)
class(hbk)
PcaRank(as.matrix(hbk))
z=PcaRank(bus2)
z=PcaRank(hbk)
dim(hbk)
dim(bus2)
head(bus2)
head(hbk)
head(as.matrix(hbk))
PcaRank(as.matrix(hbk))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
PcaRank(as.matrix(hbk))
plot(PcaRank(hbk), k=2)
plot(PcaRank(hbk), k=2)
plot(PcaRank(hbk, k=2))
plot(PcaClassic(hbk, k=2))
plot(PcaHubert(hbk, k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaClassic(scale(hbk), k=2))
plot(PcaHubert(scale(hbk), k=2))
plot(PcaLocantore(scale(hbk), k=2))
plot(PcaLocantore(hbk, k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk[,-4]), k=2))
plot(PcaHubert(scale(hbk[,-4]), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.MhD(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = scale(signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
plot(PcaLocantore(scale(hbk), k=2))
plot(PcaRank(hbk), k=2))
plot(PcaRank(hbk, k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(hbk), k=2))
plot(PcaRank(hbk, k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaClassic(scale(hbk), k=2))
plot(PcaClassic((hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = (max(depths) - depths)^2
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaClassic((hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = exp(max(depths) - depths)
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = 1/(max(depths) - depths)
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = (signs * depths)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = (signs)
PcaClassic(data.rank, ...)
}
plot(PcaRank(scale(hbk), k=2))
plot(PcaRank((hbk), k=2))
data.X=hbk
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
n
p
norms
signs
plot(PcaClassic(signs,k=2))
plot(PcaLocantore(data.X,k=2))
?PcaLocantore
sqrt(signs^2 %*% rep(1,p))
data.X=hbk[,1:2]
plot(data.X)
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
plot(signs)
?center
data.X=scale(hbk)
PcaRank = function(data.X, ...){
# get ranks
n = nrow(data.X)
p = ncol(data.X)
norms = sqrt(data.X^2 %*% rep(1,p))
signs = data.X / (norms %*% rep(1,p))
# calculate depth
require(fda.usc)
depths = mdepth.RP(data.X, data.X)$dep
depths = max(depths) - depths
data.rank = (signs)
PcaClassic(data.rank, ...)
}
plor(PcaRank(scale(hbk), k=2))
plot(PcaRank(scale(hbk), k=2))
plot(PcaClassic(scale(hbk), k=2))
PcaLocantore
